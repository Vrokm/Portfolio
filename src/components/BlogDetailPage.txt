// src/pages/BlogDetailPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import fm from 'front-matter';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import remarkGfm from 'remark-gfm';
import ParticlesBackground from '../components/ParticlesBackground';

// Define interfaces
interface BlogPostFrontMatter {
  title: string;
  date: string;
  slug: string;
  imageUrl: string;
  excerpt: string;
  author?: string;
  tags?: string[];
}

interface BlogPost extends BlogPostFrontMatter {
  content: string;
}

const BlogDetailPage: React.FC = () => {
  const { slug } = useParams<{ slug: string }>();
  const [post, setPost] = useState<BlogPost | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPost = async () => {
      if (!slug) return;

      setLoading(true);
      setError(null);

      try {
        console.log(`Fetching /content/posts/${slug}.md`);
        const response = await fetch(`/content/posts/${slug}.md`);
        
        if (!response.ok) {
          console.error(`Error fetching: /content/posts/${slug}.md`, response.statusText);
          throw new Error(`Failed to fetch ${slug}.md: ${response.statusText}`);
        }

        const text = await response.text();
        const { attributes, body } = fm<BlogPostFrontMatter>(text);

        setPost({
          ...attributes,
          slug: slug,
          content: body,
        });
      } catch (err: any) {
        console.error("Error fetching post:", err);
        setError("Could not load blog post. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchPost();
  }, [slug]);

  // Markdown renderer component - fixed TypeScript issues
  const MarkdownRenderer: React.FC<{ content: string }> = ({ content }) => {
    return (
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        components={{
          code: ({ className, children, ...props }: any) => {
            const match = /language-(\w+)/.exec(className || '');
            return !props.inline && match ? (
              <SyntaxHighlighter
                style={vscDarkPlus}
                language={match[1]}
                PreTag="div"
                {...props}
              >
                {String(children).replace(/\n$/, '')}
              </SyntaxHighlighter>
            ) : (
              <code className={className} {...props}>
                {children}
              </code>
            );
          },
          img: ({ src, alt, ...props }: any) => (
            <img 
              src={src} 
              alt={alt || ''} 
              className="rounded-lg max-w-full h-auto my-4" 
              {...props} 
            />
          ),
          a: ({ href, children, ...props }: any) => (
            <a 
              href={href} 
              className="text-blue-600 dark:text-blue-400 hover:underline" 
              {...props}
            >
              {children}
            </a>
          ),
          h2: ({ children, ...props }: any) => (
            <h2 className="text-2xl font-bold mt-8 mb-4" {...props}>
              {children}
            </h2>
          ),
          h3: ({ children, ...props }: any) => (
            <h3 className="text-xl font-bold mt-6 mb-3" {...props}>
              {children}
            </h3>
          ),
          p: ({ children, ...props }: any) => (
            <p className="my-4" {...props}>
              {children}
            </p>
          ),
          ul: ({ children, ...props }: any) => (
            <ul className="list-disc list-inside my-4 pl-4" {...props}>
              {children}
            </ul>
          ),
          ol: ({ children, ...props }: any) => (
            <ol className="list-decimal list-inside my-4 pl-4" {...props}>
              {children}
            </ol>
          ),
          blockquote: ({ children, ...props }: any) => (
            <blockquote 
              className="border-l-4 border-gray-300 dark:border-gray-700 pl-4 py-1 my-4 italic text-gray-700 dark:text-gray-300" 
              {...props}
            >
              {children}
            </blockquote>
          ),
        }}
      >
        {content}
      </ReactMarkdown>
    );
  };

  if (loading) {
    return (
      <div className="relative min-h-screen">
        <ParticlesBackground />
        <div className="relative z-10 flex justify-center items-center min-h-[60vh]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-4 text-gray-700 dark:text-gray-300">Loading post...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error || !post) {
    return (
      <div className="relative min-h-screen">
        <ParticlesBackground />
        <div className="relative z-10 flex justify-center items-center min-h-[60vh]">
          <div className="bg-white/80 dark:bg-gray-900/80 p-8 rounded-lg shadow-lg max-w-2xl mx-auto text-center backdrop-blur-sm">
            <h2 className="text-2xl font-bold text-red-600 mb-4">Error</h2>
            <p className="text-gray-700 dark:text-gray-300">{error || "Post not found"}</p>
            <Link to="/blog" className="mt-6 inline-block bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded">
              Back to Blog
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen">
      <ParticlesBackground />
      <article className="relative z-10 py-8 md:py-16">
        {/* Hero section with post image */}
        <div className="w-full h-64 md:h-96 mb-8 relative">
          <img 
            src={post.imageUrl || "https://via.placeholder.com/1200x400"} 
            alt={post.title}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-black/50"></div>
          <div className="absolute bottom-0 left-0 right-0 p-6 md:p-10">
            <div className="container mx-auto max-w-4xl">
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 line-clamp-2">
                {post.title}
              </h1>
              <div className="flex flex-wrap items-center text-white/90">
                {post.author && (
                  <span className="mr-6 mb-2">
                    <span className="font-semibold">By:</span> {post.author}
                  </span>
                )}
                <span className="mr-6 mb-2">
                  <span className="font-semibold">Published:</span> {new Date(post.date).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </span>
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap mb-2">
                    {post.tags.map(tag => (
                      <span 
                        key={tag} 
                        className="bg-blue-600/80 text-white text-xs px-2 py-1 rounded mr-2 mb-2"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Post content */}
        <div className="container mx-auto px-6">
          <div className="max-w-4xl mx-auto bg-white/90 dark:bg-gray-900/90 rounded-lg shadow-lg p-6 md:p-10 backdrop-blur-sm">
            <div className="prose prose-lg dark:prose-invert max-w-none">
              <MarkdownRenderer content={post.content} />
            </div>
            
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
              <div className="flex justify-between items-center flex-wrap gap-4">
                <Link 
                  to="/blog" 
                  className="text-blue-600 dark:text-blue-400 hover:underline inline-flex items-center group"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 transition-transform group-hover:-translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                  </svg>
                  Back to all posts
                </Link>
                
                {/* Social sharing links (optional) */}
                <div className="flex space-x-4">
                  <button 
                    onClick={() => navigator.clipboard.writeText(window.location.href)}
                    className="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                    title="Copy link to clipboard"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                  </button>
                  <a 
                    href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(window.location.href)}&text=${encodeURIComponent(post.title)}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-gray-600 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-400 transition-colors"
                    title="Share on Twitter"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                    </svg>
                  </a>
                  <a 
                    href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-gray-600 dark:text-gray-400 hover:text-blue-700 dark:hover:text-blue-400 transition-colors"
                    title="Share on Facebook"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>
    </div>
  );
};

export default BlogDetailPage;